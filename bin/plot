#!/usr/bin/env python3
import matplotlib
# matplotlib.use('Agg')
from utils.plot_utils import wash_benchmark_data, parse_data, plot_absolute, plot_relative, image_path
import matplotlib.pyplot as plt

gate_data = parse_data(
    packages=['projectq', 'qiskit', 'cirq', 'quest', 'qulacs', 'yao'],
    labels=['X', 'H', 'T', 'CNOT', 'Toffoli']
)

circuit_data = parse_data(
    packages=['projectq', 'cirq', 'quest', 'pennylane', 'qulacs', 'yao'],
    labels=['QCBM']
)

batch_circuit_data = parse_data(
    packages=['yao'],
    labels=['QCBM (batch)']
)

# make up a fake data multiply single batch by 1000
batch_circuit_data['yao x 1000'] = circuit_data['yao'][0:12].copy()
batch_circuit_data['yao x 1000']['QCBM'] = batch_circuit_data['yao x 1000']['QCBM'].apply(lambda x: x * 1000)
batch_circuit_data['yao x 1000'] = batch_circuit_data['yao x 1000'].rename(columns={'QCBM': 'QCBM (batch)'})

# plot single gate absolute time
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(10, 8))
ax2.yaxis.set_label_position("right")
ax4.yaxis.set_label_position("right")
ax2.yaxis.tick_right()
ax4.yaxis.tick_right()

ls, labels = plot_absolute(ax1, gate_data, 'X')
plot_absolute(ax2, gate_data, 'H')
plot_absolute(ax3, gate_data, 'CNOT')
plot_absolute(ax4, gate_data, 'Toffoli')

ax1.set_title("(a)", loc='left')
ax2.set_title("(b)", loc='left')
ax3.set_title("(c)", loc='left')
ax4.set_title("(d)", loc='left')

plt.tight_layout()
plt.subplots_adjust(top=0.85)
lgd = fig.legend(
    ls,
    labels=labels,
    loc="upper center",
    ncol=3,
    frameon=False,
    prop={'size': 15},
    borderaxespad=-0.4,
    bbox_to_anchor=(0.5, 0.97))

plt.savefig(image_path('gates.png'), bbox_extra_artists=(lgd,), bbox_inches='tight')
plt.savefig(image_path('gates.pdf'), bbox_extra_artists=(lgd,), bbox_inches='tight')

# plot single gate relative time
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(10, 8), sharey=True)
ls, labels = plot_relative(ax1, gate_data, 'X')
plot_relative(ax2, gate_data, 'H')
plot_relative(ax3, gate_data, 'CNOT')
plot_relative(ax4, gate_data, 'Toffoli')

ax1.set(title="X gate (relative time)")
ax2.set(title="H gate (relative time)")
ax3.set(title="CNOT gate (relative time)")
ax4.set(title="Toffoli gate (relative time)")

plt.tight_layout()
plt.subplots_adjust(top=0.85)
lgd = fig.legend(
    ls,
    labels=labels,
    loc="upper center",
    ncol=3,
    frameon=False,
    prop={'size': 15},
    borderaxespad=-0.4,
    bbox_to_anchor=(0.5, 0.97))

plt.savefig(image_path('gates_relative.png'), bbox_extra_artists=(lgd,), bbox_inches='tight')
plt.savefig(image_path('gates_relative.pdf'), bbox_extra_artists=(lgd,), bbox_inches='tight')

# plot parameterized quantum circuit absolute time
fig = plt.figure(figsize=(12, 5), constrained_layout=False)
gs = fig.add_gridspec(1, 12)
ax1 = fig.add_subplot(gs[0, :-6])
ax2 = fig.add_subplot(gs[0:, -6:])
ls1, labels1 = plot_absolute(ax1, circuit_data, 'QCBM')

# ax1.set_title("(b)", loc='left')
ax1.set_ylim([0, 1e14])
# ax2.set_title("(c)", loc='left')

# plot batched parameterized quantum circuit absolute time
ls2, labels2 = plot_absolute(ax2, batch_circuit_data, 'QCBM (batch)')

lgd1 = ax1.legend(labels1, loc='upper left', ncol=3)
lgd2 = ax2.legend(labels2, loc='upper left', ncol=1)

plt.tight_layout()

plt.savefig(image_path('pcircuit.png'), bbox_extra_artists=(lgd1,lgd2), bbox_inches='tight')
plt.savefig(image_path('pcircuit.pdf'), bbox_extra_artists=(lgd1,lgd2), bbox_inches='tight')

# parameterized quantum circuit relative time
fig = plt.figure(figsize=(12, 5), constrained_layout=False)
gs = fig.add_gridspec(1, 12)
ax1 = fig.add_subplot(gs[0, :-6])
ax2 = fig.add_subplot(gs[0:, -6:])
ls, labels = plot_relative(ax1, circuit_data, 'QCBM')

ax1.set(title="b) Parameterized Circuit (relative time)")
ax1.set_ylim([0, 1e14])
ax2.set(title="c) Batched Parameterized Circuit (relative time)")

# batched parameterized quantum circuit relative time
ls, labels = plot_relative(ax2, batch_circuit_data, 'QCBM (batch)', to='yao (cuda)', log=False)

lgd1 = ax1.legend(labels1, loc='upper left', ncol=3)
lgd2 = ax2.legend(labels2, loc='upper left', ncol=1)

plt.tight_layout()

plt.savefig(image_path('pcircuit_relative.png'), bbox_extra_artists=(lgd1,lgd2), bbox_inches='tight')
plt.savefig(image_path('pcircuit_relative.pdf'), bbox_extra_artists=(lgd1,lgd2), bbox_inches='tight')
