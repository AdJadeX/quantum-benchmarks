#!/bin/sh
FILE_PATH=$(readlink -f "$0")
BASE_PATH=$(dirname "$FILE_PATH")
ROOT_PATH="$BASE_PATH/.."
NCORES=$(grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}')

benchmark_pytest() {
    # set threads to one
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1
    export MKL_DOMAIN_NUM_THREADS=1

    pytest "$1/benchmarks.py" --benchmark-save=$1 --benchmark-sort=name --benchmark-min-rounds=5 > $1.out 2> $1.err
}

benchmark_julia() {
    export JULIA_NUM_THREADS=1
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1

    julia --project yao/benchmarks.jl yao.csv yao_qcbm.csv yao_qcbm_batch.csv > yao.out 2> yao.err
}

install() {
    # install Python dependencies
    echo "installing Python dependencies"
    conda install mkl-service
    conda install pytest
    pip install -r requirements.txt
    # install Julia dependencies
    echo "installing Julia dependencies"
    julia --project -e "using Pkg; Pkg.instantiate()"
}

benchmark_parallel(){
    # start benchmark
    benchmark_pytest cirq       &
    benchmark_pytest qiskit     &
    benchmark_pytest projectq   &
    benchmark_pytest pennylane  &
    benchmark_julia             &
}

benchmark(){
    # start benchmark
    benchmark_pytest cirq
    benchmark_pytest qiskit
    benchmark_pytest projectq
    benchmark_pytest pennylane
    benchmark_julia
}

help() {
    echo "
    Quantum Circuit Simulation Benchmark

install     install dependencies
run         start benchmarking
parallel    spawn each benchmark in a process
help        print this message
"
}

case $1 in
    install) (cd $ROOT_PATH && install)
    ;;
    run) (cd $ROOT_PATH && benchmark)
    ;;
    parallel) (cd $ROOT_PATH && benchmark_parallel)
    ;;
    *) help
    ;;
esac
